package com.blackducksoftware.integration.email.transformer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.junit.Test;

import com.blackducksoftware.integration.email.model.FreemarkerTarget;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;

public class VulnerabilityTransformTest {

	@Test
	public void testVulnerabilityTransform() {
		final String projectName = "Test Project";
		final String versionName = "0.1.0-TEST";
		final String componentName = "component";
		final String componentVersion = "componentVersion";
		final UUID componentID = UUID.randomUUID();
		final UUID componentVersionID = UUID.randomUUID();
		final String vulnSource = "VulnSource";
		final String vulnId = "VulnId";
		final ProjectVersion projectVersion = new ProjectVersion();
		projectVersion.setProjectName(projectName);
		projectVersion.setProjectVersionName(versionName);

		final VulnerabilitySourceQualifiedId vuln = new VulnerabilitySourceQualifiedId(vulnSource, vulnId);
		final List<VulnerabilitySourceQualifiedId> added = new ArrayList<>();
		final List<VulnerabilitySourceQualifiedId> updated = new ArrayList<>();
		final List<VulnerabilitySourceQualifiedId> deleted = new ArrayList<>();
		added.add(vuln);
		updated.add(vuln);
		deleted.add(vuln);

		final VulnerabilityContentItem item = new VulnerabilityContentItem(projectVersion, componentName,
				componentVersion, componentID, componentVersionID, added, updated, deleted);
		final VulnerabilityTransformer transformer = new VulnerabilityTransformer();
		final FreemarkerTarget target = transformer.transform(item);

		assertNotNull(target);
		assertEquals(1, target.size());
		final Map<String, String> dataMap = target.get(0);
		assertEquals(projectName, dataMap.get(NotificationTransformer.KEY_PROJECT_NAME));
		assertEquals(versionName, dataMap.get(NotificationTransformer.KEY_PROJECT_VERSION));
		assertEquals(componentName, dataMap.get(NotificationTransformer.KEY_COMPONENT_NAME));
		assertEquals(componentVersion, dataMap.get(NotificationTransformer.KEY_COMPONENT_VERSION));
		assertVulnItem(dataMap, NotificationTransformer.KEY_VULN_ADDED, "added", vulnSource, vulnId);
		assertVulnItem(dataMap, NotificationTransformer.KEY_VULN_UPDATED, "updated", vulnSource, vulnId);
		assertVulnItem(dataMap, NotificationTransformer.KEY_VULN_DELETED, "deleted", vulnSource, vulnId);
	}

	private void assertVulnItem(final Map<String, String> dataMap, final String key, final String verb,
			final String vulnSource, final String vulnId) {
		final String value = "Vulnerabilities " + verb + ": " + vulnId + " (" + vulnSource + ")";
		assertEquals(value, dataMap.get(key));
	}
}
