package com.blackducksoftware.integration.email.transforms;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.email.model.EmailContentItem;
import com.blackducksoftware.integration.email.model.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.RuleViolationNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.notification.NotificationService;

public class VulnerabilityTransform extends AbstractNotificationTransform {

	public final static String KEY_VULN_ADDED = "vulnAddedList";
	public final static String KEY_VULN_UPDATED = "vulnUpdatedList";
	public final static String KEY_VULN_DELETED = "vulnDeletedList";
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityTransform.class);

	public VulnerabilityTransform(final NotificationService notificationService) {
		super(notificationService);
	}

	@Override
	public List<EmailContentItem> transform(final NotificationItem item) {
		final List<EmailContentItem> templateData = new ArrayList<>();
		try {
			final VulnerabilityNotificationItem vulnerability = (VulnerabilityNotificationItem) item;
			final VulnerabilityNotificationContent vulnContent = vulnerability.getContent();

			final String componentName = vulnerability.getContent().getComponentName();
			final String componentVersionName = vulnerability.getContent().getVersionName();
			String projectName;
			String projectVersionName;
			final List<ProjectVersion> projectVersionList = vulnerability.getContent().getAffectedProjectVersions();
			for (final ProjectVersion projectVersion : projectVersionList) {
				projectName = projectVersion.getProjectName();
				projectVersionName = projectVersion.getProjectVersionName();
				List<VulnerabilitySourceQualifiedId> addedVulnList = new ArrayList<>();
				List<VulnerabilitySourceQualifiedId> updatedVulnList = new ArrayList<>();
				List<VulnerabilitySourceQualifiedId> deletedVulnList = new ArrayList<>();

				if (vulnContent.getNewVulnerabilityCount() > 0) {
					addedVulnList = vulnContent.getNewVulnerabilityIds();
				}
				if (vulnContent.getUpdatedVulnerabilityCount() > 0) {
					updatedVulnList = vulnContent.getUpdatedVulnerabilityIds();
				}
				if (vulnContent.getDeletedVulnerabilityCount() > 0) {
					deletedVulnList = vulnContent.getDeletedVulnerabilityIds();
				}
				templateData.add(new VulnerabilityContentItem(projectName, projectVersionName, componentName,
						componentVersionName, addedVulnList, updatedVulnList, deletedVulnList));
			}
		} catch (final Exception e) {
			logger.error("Error transforming " + item, e);
		}
		return templateData;
	}

	@Override
	public String getNotificationType() {
		return RuleViolationNotificationItem.class.getName();
	}
}
