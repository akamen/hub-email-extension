package com.blackducksoftware.integration.email.transforms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.notification.NotificationService;

public class VulnerabilityTransform extends AbstractTransform {

	public final static String KEY_VULN_ADDED = "vulnAddedList";
	public final static String KEY_VULN_UPDATED = "vulnUpdatedList";
	public final static String KEY_VULN_DELETED = "vulnDeletedList";
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityTransform.class);

	public VulnerabilityTransform(final NotificationService notificationService) {
		super(notificationService);
	}

	@Override
	public List<Map<String, Object>> transform(final NotificationItem item) {
		final List<Map<String, Object>> templateData = new ArrayList<>();
		try {
			final VulnerabilityNotificationItem vulnerability = (VulnerabilityNotificationItem) item;
			final VulnerabilityNotificationContent vulnContent = vulnerability.getContent();

			final String componentName = vulnerability.getContent().getComponentName();
			final String componentVersionName = vulnerability.getContent().getVersionName();
			String projectName;
			String projectVersionName;
			final List<ProjectVersion> projectVersionList = vulnerability.getContent().getAffectedProjectVersions();
			for (final ProjectVersion projectVersion : projectVersionList) {
				projectName = projectVersion.getProjectName();
				projectVersionName = projectVersion.getProjectVersionName();

				final Map<String, Object> itemMap = new HashMap<>();
				itemMap.put(KEY_PROJECT_NAME, projectName);
				itemMap.put(KEY_PROJECT_VERSION, projectVersionName);
				itemMap.put(KEY_COMPONENT_NAME, componentName);
				itemMap.put(KEY_COMPONENT_VERSION, componentVersionName);
				if (vulnContent.getNewVulnerabilityCount() > 0) {
					itemMap.put(KEY_VULN_ADDED, generateVulnText(vulnContent.getNewVulnerabilityIds(), "added"));
				}
				if (vulnContent.getUpdatedVulnerabilityCount() > 0) {
					itemMap.put(KEY_VULN_UPDATED,
							generateVulnText(vulnContent.getUpdatedVulnerabilityIds(), "updated"));
				}
				if (vulnContent.getDeletedVulnerabilityCount() > 0) {
					itemMap.put(KEY_VULN_DELETED,
							generateVulnText(vulnContent.getDeletedVulnerabilityIds(), "deleted"));
				}
				templateData.add(itemMap);
			}
		} catch (final Exception e) {
			logger.error("Error transforming " + item, e);
		}
		return templateData;
	}

	private String generateVulnText(final List<VulnerabilitySourceQualifiedId> vulns, final String verb) {
		final StringBuilder commentText = new StringBuilder(150);
		commentText.append("Vulnerabilities " + verb + ": ");
		int index = 0;
		for (final VulnerabilitySourceQualifiedId vuln : vulns) {
			commentText.append(vuln.getId() + " (" + vuln.getSource() + ")");
			if ((index + 1) < vulns.size()) {
				commentText.append(", ");
			}
			index++;
		}
		commentText.append("\n");
		return commentText.toString();
	}
}
