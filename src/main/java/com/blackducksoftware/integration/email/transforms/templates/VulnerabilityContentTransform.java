package com.blackducksoftware.integration.email.transforms.templates;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.dataservices.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.items.VulnerabilityContentItem;

public class VulnerabilityContentTransform extends AbstractContentTransform {

	public final static String KEY_VULN_ADDED = "vulnAddedList";
	public final static String KEY_VULN_UPDATED = "vulnUpdatedList";
	public final static String KEY_VULN_DELETED = "vulnDeletedList";
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityContentTransform.class);

	@Override
	public List<Map<String, Object>> transform(final NotificationContentItem item) {
		final List<Map<String, Object>> templateData = new ArrayList<>();
		try {
			final Map<String, Object> itemMap = new HashMap<>();
			final VulnerabilityContentItem vulnItem = (VulnerabilityContentItem) item;
			itemMap.put(KEY_PROJECT_NAME, vulnItem.getProjectName());
			itemMap.put(KEY_PROJECT_VERSION, vulnItem.getProjectVersion());
			itemMap.put(KEY_COMPONENT_NAME, vulnItem.getComponentName());
			itemMap.put(KEY_COMPONENT_VERSION, vulnItem.getComponentVersion());
			if (!vulnItem.getAddedVulnList().isEmpty()) {
				itemMap.put(KEY_VULN_ADDED, generateVulnText(vulnItem.getAddedVulnList(), "added"));
			}
			if (!vulnItem.getUpdatedVulnList().isEmpty()) {
				itemMap.put(KEY_VULN_UPDATED, generateVulnText(vulnItem.getUpdatedVulnList(), "updated"));
			}
			if (!vulnItem.getDeletedVulnList().isEmpty()) {
				itemMap.put(KEY_VULN_DELETED, generateVulnText(vulnItem.getDeletedVulnList(), "deleted"));
			}
			templateData.add(itemMap);
		} catch (final Exception e) {
			logger.error("Error transforming " + item, e);
		}
		return templateData;
	}

	private String generateVulnText(final List<VulnerabilitySourceQualifiedId> vulns, final String verb) {
		final StringBuilder commentText = new StringBuilder(150);
		commentText.append("Vulnerabilities " + verb + ": ");
		int index = 0;
		for (final VulnerabilitySourceQualifiedId vuln : vulns) {
			commentText.append(vuln.getId() + " (" + vuln.getSource() + ")");
			if ((index + 1) < vulns.size()) {
				commentText.append(", ");
			}
			index++;
		}
		commentText.append("\n");
		return commentText.toString();
	}

	@Override
	public String getContentItemType() {
		return VulnerabilityContentItem.class.getName();
	}
}
