package com.blackducksoftware.integration.email.batch.processor;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.email.model.batch.ItemEntry;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.vulnerabilities.SeverityEnum;
import com.blackducksoftware.integration.hub.api.vulnerabilities.VulnerabilityItem;
import com.blackducksoftware.integration.hub.dataservices.DataServicesFactory;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.BDRestException;

public class VulnerabilityProcessor extends NotificationSubProcessor {
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityProcessor.class);
	private final DataServicesFactory dataServicesFactory;

	public VulnerabilityProcessor(final SubProcessorCache cache, final DataServicesFactory dataServicesFactory) {
		super(cache);
		this.dataServicesFactory = dataServicesFactory;
	}

	@Override
	public void process(final NotificationContentItem notification) {
		if (notification instanceof VulnerabilityContentItem) {
			final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;
			handleNotification(vulnerabilityContentItem);
		}
	}

	private void handleNotification(final VulnerabilityContentItem vulnerabilityContentItem) {

		final String projectName = vulnerabilityContentItem.getProjectVersion().getProjectName();
		final String projectVersion = vulnerabilityContentItem.getProjectVersion().getProjectVersionName();
		final String componentName = vulnerabilityContentItem.getComponentName();
		final String componentVersion = vulnerabilityContentItem.getComponentVersion();

		final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
		final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem.getUpdatedVulnList();
		final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem.getDeletedVulnList();

		if (addedVulnList != null && !addedVulnList.isEmpty()) {
			getCache().addEvent(createEvent(ProcessingAction.ADD, projectName, projectVersion, componentName,
					componentVersion, getVulnerabilityIds(addedVulnList)));
		}

		if (updatedVulnList != null && !updatedVulnList.isEmpty()) {
			getCache().addEvent(createEvent(ProcessingAction.ADD, projectName, projectVersion, componentName,
					componentVersion, getVulnerabilityIds(updatedVulnList)));
		}

		if (deletedVulnList != null && !deletedVulnList.isEmpty()) {
			getCache().removeEvent(createEvent(ProcessingAction.REMOVE, projectName, projectVersion, componentName,
					componentVersion, getVulnerabilityIds(deletedVulnList)));
		}
	}

	private NotificationEvent createEvent(final ProcessingAction action, final String projectName,
			final String projectVersion, final String componentName, final String componentVersion,
			final Set<String> vulnerabilityIdList) {
		final Set<ItemEntry> dataMap = new LinkedHashSet<>(2);
		dataMap.add(new ItemEntry(ItemTypeEnum.COMPONENT.name(), componentName));
		dataMap.add(new ItemEntry("", componentVersion));
		return new NotificationEvent(action, projectName, projectVersion, componentName, componentVersion,
				NotificationCategoryEnum.VULNERABILITY, dataMap, vulnerabilityIdList);
	}

	private Set<String> getVulnerabilityIds(final List<VulnerabilitySourceQualifiedId> itemList) {
		final Set<String> set = new HashSet<>();
		for (final VulnerabilitySourceQualifiedId item : itemList) {
			set.add(item.getVulnerabilityId());
		}

		return set;
	}

	@Override
	public Collection<NotificationEvent> getEvents() {
		// TODO Auto-generated method stub
		final Collection<NotificationEvent> vulnerabilities = super.getEvents();
		final Collection<NotificationEvent> result = new LinkedList<>();
		for (final NotificationEvent event : vulnerabilities) {
			final List<NotificationEvent> vulnerabilityEvents = createVulnerabilityEvents(event);
			for (final NotificationEvent vulnerability : vulnerabilityEvents) {
				result.add(vulnerability);
			}
		}

		return result;
	}

	private List<NotificationEvent> createVulnerabilityEvents(final NotificationEvent originalEvent) {
		final List<NotificationEvent> eventList = new LinkedList<>();
		final Map<NotificationCategoryEnum, NotificationEvent> eventMap = new HashMap<>();
		for (final String vulnerabilityId : originalEvent.getVulnerabilityIdSet()) {
			final VulnerabilityItem vulnerability = getVulnerabilities(vulnerabilityId);
			final NotificationCategoryEnum eventCategory = getEventCategory(vulnerability.getSeverity());
			if (eventMap.containsKey(eventCategory)) {
				final NotificationEvent event = eventMap.get(eventCategory);
				event.getVulnerabilityIdSet().add(vulnerabilityId);
			} else {
				final Set<String> vulnset = new HashSet<>();
				vulnset.add(vulnerabilityId);
				final LinkedHashSet<ItemEntry> newDataSet = new LinkedHashSet<>();
				newDataSet.addAll(originalEvent.getDataSet());
				final NotificationEvent event = new NotificationEvent(originalEvent.getAction(),
						originalEvent.getProjectName(), originalEvent.getProjectVersion(),
						originalEvent.getComponentName(), originalEvent.getComponentVersion(), eventCategory,
						newDataSet, vulnset);
				eventMap.put(eventCategory, event);
				eventList.add(event);
			}
		}
		for (final NotificationEvent event : eventList) {
			final int size = event.getVulnerabilityIdSet().size();
			if (size > 1) {
				event.getDataSet().add(new ItemEntry(ItemTypeEnum.COUNT.name(), String.valueOf(size)));
			}
		}
		return eventList;
	}

	private VulnerabilityItem getVulnerabilities(final String vulnerabilityId) {
		try {
			return dataServicesFactory.getVulnerabilityRestService().getVulnerability(vulnerabilityId);
		} catch (IOException | URISyntaxException | BDRestException e) {
			logger.error("error getting vulnerability data", e);
			return null;
		}
	}

	private NotificationCategoryEnum getEventCategory(final String severityString) {
		final SeverityEnum severity = SeverityEnum.getSeverityEnum(severityString);

		switch (severity) {
		case HIGH: {
			return NotificationCategoryEnum.HIGH_VULNERABILITY;
		}
		case MEDIUM: {
			return NotificationCategoryEnum.MEDIUM_VULNERABILITY;
		}
		case LOW: {
			return NotificationCategoryEnum.LOW_VULNERABILITY;
		}
		default: {
			return NotificationCategoryEnum.VULNERABILITY;
		}
		}
	}
}
