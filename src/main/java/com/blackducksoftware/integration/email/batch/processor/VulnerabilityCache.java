/*
 * Copyright (C) 2016 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Black Duck Software ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Black Duck Software.
 */
package com.blackducksoftware.integration.email.batch.processor;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.email.model.batch.ItemEntry;
import com.blackducksoftware.integration.hub.api.vulnerabilities.SeverityEnum;
import com.blackducksoftware.integration.hub.api.vulnerabilities.VulnerabilityItem;
import com.blackducksoftware.integration.hub.dataservices.DataServicesFactory;
import com.blackducksoftware.integration.hub.exception.BDRestException;

public class VulnerabilityCache extends SubProcessorCache<VulnerabilityEvent> {
    private final Logger logger = LoggerFactory.getLogger(VulnerabilityCache.class);

    private final DataServicesFactory dataServicesFactory;

    public VulnerabilityCache(final DataServicesFactory dataServicesFactory) {
        this.dataServicesFactory = dataServicesFactory;
    }

    @Override
    public void addEvent(final VulnerabilityEvent event) {
        final String key = event.getEventKey();
        if (!hasEvent(key)) {
            getEventMap().put(key, event);
        } else {
            final VulnerabilityEvent storedEvent = getEventMap().get(key);
            final Set<ItemEntry> storedEventDataMap = storedEvent.getDataSet();
            final Set<ItemEntry> eventDataMap = event.getDataSet();
            storedEventDataMap.addAll(eventDataMap);
            if (!event.getVulnerabilityIdSet().isEmpty()) {
                storedEvent.getVulnerabilityIdSet().addAll(event.getVulnerabilityIdSet());
            }
        }
    }

    @Override
    public void removeEvent(final VulnerabilityEvent event) {
        final String key = event.getEventKey();
        if (getEventMap().containsKey(key)) {
            final VulnerabilityEvent storedEvent = getEventMap().get(key);
            if (!storedEvent.getVulnerabilityIdSet().isEmpty() && !event.getVulnerabilityIdSet().isEmpty()) {
                storedEvent.getVulnerabilityIdSet().removeAll(event.getVulnerabilityIdSet());
            }

            if (storedEvent.getVulnerabilityIdSet().isEmpty()) {
                removeEvent(key);
            }
        }
    }

    @Override
    public Collection<VulnerabilityEvent> getEvents() {
        final Collection<VulnerabilityEvent> vulnerabilities = super.getEvents();
        final Collection<VulnerabilityEvent> result = new LinkedList<>();
        for (final VulnerabilityEvent event : vulnerabilities) {
            final List<VulnerabilityEvent> vulnerabilityEvents = createVulnerabilityEvents(event);
            for (final VulnerabilityEvent vulnerability : vulnerabilityEvents) {
                result.add(vulnerability);
            }
        }

        return result;
    }

    private List<VulnerabilityEvent> createVulnerabilityEvents(final VulnerabilityEvent originalEvent) {
        final List<VulnerabilityEvent> eventList = new LinkedList<>();
        final Map<NotificationCategoryEnum, VulnerabilityEvent> eventMap = new HashMap<>();
        for (final String vulnerabilityId : originalEvent.getVulnerabilityIdSet()) {
            final VulnerabilityItem vulnerability = getVulnerabilities(vulnerabilityId);
            final NotificationCategoryEnum eventCategory = getEventCategory(vulnerability.getSeverity());
            if (eventMap.containsKey(eventCategory)) {
                final VulnerabilityEvent event = eventMap.get(eventCategory);
                event.getVulnerabilityIdSet().add(vulnerabilityId);
            } else {
                try {
                    final Set<String> vulnset = new HashSet<>();
                    vulnset.add(vulnerabilityId);
                    final VulnerabilityEvent event = new VulnerabilityEvent(originalEvent.getAction(), eventCategory, originalEvent.getNotificationContent(),
                            vulnset);
                    eventMap.put(eventCategory, event);
                    eventList.add(event);
                } catch (URISyntaxException e) {
                    logger.error("Error creating vulnerability event for item {} ", originalEvent.getNotificationContent(), e);
                }
            }
        }
        for (final VulnerabilityEvent event : eventList) {
            final int size = event.getVulnerabilityIdSet().size();
            if (size > 1) {
                event.getDataSet().add(new ItemEntry(ItemTypeEnum.COUNT.name(), String.valueOf(size)));
            }
        }
        return eventList;
    }

    private VulnerabilityItem getVulnerabilities(final String vulnerabilityId) {
        try {
            return dataServicesFactory.getVulnerabilityRestService().getVulnerability(vulnerabilityId);
        } catch (IOException | URISyntaxException | BDRestException e) {
            logger.error("error getting vulnerability data", e);
            return null;
        }
    }

    private NotificationCategoryEnum getEventCategory(final String severityString) {
        final SeverityEnum severity = SeverityEnum.getSeverityEnum(severityString);

        switch (severity) {
        case HIGH: {
            return NotificationCategoryEnum.HIGH_VULNERABILITY;
        }
        case MEDIUM: {
            return NotificationCategoryEnum.MEDIUM_VULNERABILITY;
        }
        case LOW: {
            return NotificationCategoryEnum.LOW_VULNERABILITY;
        }
        default: {
            return NotificationCategoryEnum.VULNERABILITY;
        }
        }
    }
}
