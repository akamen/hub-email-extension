package com.blackducksoftware.integration.email.batch.processor.converter;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.email.batch.processor.NotificationCategory;
import com.blackducksoftware.integration.email.batch.processor.NotificationEvent;
import com.blackducksoftware.integration.email.batch.processor.NotificationItemType;
import com.blackducksoftware.integration.email.batch.processor.ProcessingAction;
import com.blackducksoftware.integration.hub.HubIntRestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.version.ReleaseItem;
import com.blackducksoftware.integration.hub.api.vulnerableBomComponent.VulnerableBomComponentItem;
import com.blackducksoftware.integration.hub.dataservices.DataServicesFactory;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.BDRestException;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;
import com.blackducksoftware.integration.hub.exception.UnexpectedHubResponseException;

public class VulnerabilityConverter implements IItemConverter {
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityConverter.class);
	private final DataServicesFactory dataServicesFactory;

	private HubIntRestService hubRestService;

	public VulnerabilityConverter(final DataServicesFactory dataServicesFactory) {
		this.dataServicesFactory = dataServicesFactory;
		try {
			hubRestService = new HubIntRestService(dataServicesFactory.getRestConnection());
		} catch (final URISyntaxException e) {
			logger.error("couldn't create hub int rest service", e);
			hubRestService = null;
		}
	}

	@Override
	public List<NotificationEvent> convert(final NotificationContentItem notification) {
		List<NotificationEvent> itemList = new LinkedList<>();
		if (notification instanceof VulnerabilityContentItem) {
			final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;
			// final boolean componentVersionExistsInBom =
			// isComponentVersionHasVulnerabilities(vulnerabilityContentItem);
			try {
				itemList = handleNotification(vulnerabilityContentItem, false);
			} catch (final Exception e) {
				logger.error("Error processing vulnerability event", e);
			}
		}
		return itemList;
	}

	private boolean isComponentVersionHasVulnerabilities(final VulnerabilityContentItem vulnerabilityContentItem) {
		if (vulnerabilityContentItem.getDeletedVulnList() != null
				&& !vulnerabilityContentItem.getDeletedVulnList().isEmpty()) {
			logger.debug("Since no vulnerabilities were deleted, the component must still have vulnerabilities");
			return true;
		}
		ReleaseItem projectReleaseItem;
		try {
			projectReleaseItem = hubRestService
					.getProjectVersion(vulnerabilityContentItem.getProjectVersion().getUrl());
		} catch (IOException | BDRestException | URISyntaxException e1) {
			logger.error(
					"Error getting project release item. Unable to determine if this component still has vulnerabilities");
			return true;
		}
		String vulnerableComponentsUrl;
		try {
			// TODO need to extract into a common
			vulnerableComponentsUrl = projectReleaseItem.getLink("vulnerable-components");
		} catch (final UnexpectedHubResponseException e1) {
			logger.error(
					"Error getting vulnerable-components link from project release item. Unable to determine if this component still has vulnerabilities");
			return true;
		}

		List<VulnerableBomComponentItem> vulnerableBomComponentItems;
		try {
			vulnerableBomComponentItems = dataServicesFactory.getVulnerableBomComponentRestService()
					.getVulnerableComponentsMatchingComponentName(vulnerableComponentsUrl,
							vulnerabilityContentItem.getComponentName());
		} catch (IOException | URISyntaxException | BDRestException e) {
			logger.error(
					"Error getting vulnerable components. Unable to determine if this component still has vulnerabilities");
			return true;
		}

		logger.debug("vulnerableBomComponentItems.size(): " + vulnerableBomComponentItems.size());
		if (hasVersion(vulnerableBomComponentItems, vulnerabilityContentItem.getComponentVersion())) {
			logger.debug("This component still has vulnerabilities");
			return true;
		} else {
			logger.debug("This component either no longer has vulnerabilities, or is no longer in the BOM");
			return false;
		}
	}

	private boolean hasVersion(final List<VulnerableBomComponentItem> vulnerableBomComponentItems,
			String targetVersionName) {
		if (StringUtils.isEmpty(targetVersionName)) {
			targetVersionName = null;
		}
		for (final VulnerableBomComponentItem vulnerableBomComponentItem : vulnerableBomComponentItems) {
			String currentVersionName = vulnerableBomComponentItem.getComponentVersionName();
			if (StringUtils.isEmpty(currentVersionName)) {
				currentVersionName = null;
			}
			if (currentVersionName == targetVersionName) {
				return true;
			}
		}
		return false;
	}

	private List<NotificationEvent> handleNotification(final VulnerabilityContentItem vulnerabilityContentItem,
			final boolean componentVersionExistsInBom) throws NotificationServiceException {

		final String projectName = vulnerabilityContentItem.getProjectVersion().getProjectName();
		final String projectVersion = vulnerabilityContentItem.getProjectVersion().getProjectVersionName();
		final String componentName = vulnerabilityContentItem.getComponentName();
		final String componentVersion = vulnerabilityContentItem.getComponentVersion();

		final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
		final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem.getUpdatedVulnList();
		final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem.getDeletedVulnList();

		// final boolean notificationHasOnlyDeletes = (addedVulnList == null ||
		// addedVulnList.isEmpty())
		// && (updatedVulnList == null || updatedVulnList.isEmpty())
		// && (deletedVulnList != null && !deletedVulnList.isEmpty());

		// ProcessingAction eventAction = ProcessingAction.ADD;
		final List<NotificationEvent> events = new LinkedList<>();
		// if (!componentVersionExistsInBom) {
		// events.add(createEvents(ProcessingAction.REMOVE, projectName,
		// projectVersion, componentName,
		// componentVersion, Collections.emptySet()));
		// } else if (notificationHasOnlyDeletes) {
		// events.add(createEvents(ProcessingAction.REMOVE, projectName,
		// projectVersion, componentName,
		// componentVersion, getVulnerabilityIds(deletedVulnList)));
		// } else {
		if (addedVulnList != null && !addedVulnList.isEmpty()) {
			events.add(createEvents(ProcessingAction.ADD, projectName, projectVersion, componentName, componentVersion,
					getVulnerabilityIds(addedVulnList)));
		}

		if (updatedVulnList != null && !updatedVulnList.isEmpty()) {
			events.add(createEvents(ProcessingAction.ADD, projectName, projectVersion, componentName, componentVersion,
					getVulnerabilityIds(updatedVulnList)));
		}

		if (deletedVulnList != null && !deletedVulnList.isEmpty()) {
			events.add(createEvents(ProcessingAction.REMOVE, projectName, projectVersion, componentName,
					componentVersion, getVulnerabilityIds(deletedVulnList)));
		}
		// }

		return events;
	}

	private NotificationEvent createEvents(final ProcessingAction action, final String projectName,
			final String projectVersion, final String componentName, final String componentVersion,
			final Set<String> vulnerabilityIdList) {
		final Map<String, String> dataMap = new LinkedHashMap<>(2);
		dataMap.put(componentName, NotificationItemType.ITEM_TYPE_COMPONENT.name());
		dataMap.put(componentVersion, "");
		return new NotificationEvent(action, projectName, projectVersion, componentName, componentVersion,
				NotificationCategory.CATEGORY_VULNERABILITY, dataMap, vulnerabilityIdList);
	}

	private Set<String> getVulnerabilityIds(final List<VulnerabilitySourceQualifiedId> itemList) {
		final Set<String> set = new HashSet<>();
		for (final VulnerabilitySourceQualifiedId item : itemList) {
			set.add(item.getVulnerabilityId());
		}

		return set;
	}
}
