package com.blackducksoftware.integration.email.batch.processor.converter;

import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.email.batch.processor.NotificationCategoryEnum;
import com.blackducksoftware.integration.email.batch.processor.NotificationEvent;
import com.blackducksoftware.integration.email.batch.processor.ItemTypeEnum;
import com.blackducksoftware.integration.email.batch.processor.ProcessingAction;
import com.blackducksoftware.integration.email.model.batch.ItemEntry;
import com.blackducksoftware.integration.hub.HubIntRestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.dataservices.DataServicesFactory;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;

public class VulnerabilityConverter implements IItemConverter {
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityConverter.class);
	private final DataServicesFactory dataServicesFactory;

	private HubIntRestService hubRestService;

	public VulnerabilityConverter(final DataServicesFactory dataServicesFactory) {
		this.dataServicesFactory = dataServicesFactory;
		try {
			hubRestService = new HubIntRestService(dataServicesFactory.getRestConnection());
		} catch (final URISyntaxException e) {
			logger.error("couldn't create hub int rest service", e);
			hubRestService = null;
		}
	}

	@Override
	public List<NotificationEvent> convert(final NotificationContentItem notification) {
		List<NotificationEvent> itemList = new LinkedList<>();
		if (notification instanceof VulnerabilityContentItem) {
			final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;
			// final boolean componentVersionExistsInBom =
			// isComponentVersionHasVulnerabilities(vulnerabilityContentItem);
			try {
				itemList = handleNotification(vulnerabilityContentItem, false);
			} catch (final Exception e) {
				logger.error("Error processing vulnerability event", e);
			}
		}
		return itemList;
	}

	private List<NotificationEvent> handleNotification(final VulnerabilityContentItem vulnerabilityContentItem,
			final boolean componentVersionExistsInBom) throws NotificationServiceException {

		final String projectName = vulnerabilityContentItem.getProjectVersion().getProjectName();
		final String projectVersion = vulnerabilityContentItem.getProjectVersion().getProjectVersionName();
		final String componentName = vulnerabilityContentItem.getComponentName();
		final String componentVersion = vulnerabilityContentItem.getComponentVersion();

		final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
		final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem.getUpdatedVulnList();
		final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem.getDeletedVulnList();

		final List<NotificationEvent> events = new LinkedList<>();
		if (addedVulnList != null && !addedVulnList.isEmpty()) {
			events.add(createEvents(ProcessingAction.ADD, projectName, projectVersion, componentName, componentVersion,
					getVulnerabilityIds(addedVulnList)));
		}

		if (updatedVulnList != null && !updatedVulnList.isEmpty()) {
			events.add(createEvents(ProcessingAction.ADD, projectName, projectVersion, componentName, componentVersion,
					getVulnerabilityIds(updatedVulnList)));
		}

		if (deletedVulnList != null && !deletedVulnList.isEmpty()) {
			events.add(createEvents(ProcessingAction.REMOVE, projectName, projectVersion, componentName,
					componentVersion, getVulnerabilityIds(deletedVulnList)));
		}

		return events;
	}

	private NotificationEvent createEvents(final ProcessingAction action, final String projectName,
			final String projectVersion, final String componentName, final String componentVersion,
			final Set<String> vulnerabilityIdList) {
		final Set<ItemEntry> dataMap = new LinkedHashSet<>(2);
		dataMap.add(new ItemEntry(ItemTypeEnum.COMPONENT.name(), componentName));
		dataMap.add(new ItemEntry("", componentVersion));
		return new NotificationEvent(action, projectName, projectVersion, componentName, componentVersion,
				NotificationCategoryEnum.VULNERABILITY, dataMap, vulnerabilityIdList);
	}

	private Set<String> getVulnerabilityIds(final List<VulnerabilitySourceQualifiedId> itemList) {
		final Set<String> set = new HashSet<>();
		for (final VulnerabilitySourceQualifiedId item : itemList) {
			set.add(item.getVulnerabilityId());
		}

		return set;
	}
}
