package com.blackducksoftware.integration.email.batch.processor.converter;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.blackducksoftware.integration.email.batch.processor.NotificationEvent;
import com.blackducksoftware.integration.email.batch.processor.NotificationProcessorConstants;
import com.blackducksoftware.integration.email.batch.processor.ProcessingAction;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.vulnerableBomComponent.VulnerableBomComponentItem;
import com.blackducksoftware.integration.hub.api.vulnerableBomComponent.VulnerableBomComponentRestService;
import com.blackducksoftware.integration.hub.dataservices.DataServicesFactory;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.BDRestException;
import com.blackducksoftware.integration.hub.exception.MissingUUIDException;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;

public class VulnerabilityConverter implements IItemConverter {
	private final Logger logger = LoggerFactory.getLogger(VulnerabilityConverter.class);
	private final DataServicesFactory dataServicesFactory;

	public VulnerabilityConverter(final DataServicesFactory dataServicesFactory) {
		this.dataServicesFactory = dataServicesFactory;
	}

	@Override
	public List<NotificationEvent> convert(final NotificationContentItem notification) {
		final List<NotificationEvent> itemList = new LinkedList<>();
		if (notification instanceof VulnerabilityContentItem) {
			final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;

			final boolean componentVersionExistsInBom = isComponentVersionInBom(vulnerabilityContentItem);

			try {
				final NotificationEvent event = handleNotification(vulnerabilityContentItem,
						componentVersionExistsInBom);
				if (event != null) {
					itemList.add(event);
				}
			} catch (final Exception e) {
				logger.error("Error processing vulnerability event", e);
			}
		}
		return itemList;
	}

	private boolean isComponentVersionInBom(final VulnerabilityContentItem vulnerabilityContentItem) {
		if (vulnerabilityContentItem != null && vulnerabilityContentItem.getDeletedVulnList().isEmpty()) {
			logger.debug("Since no vulnerabilities were deleted, the component must still have vulnerabilities");
			return true;
		}
		// TODO need to be rafactored to a link
		String projectId;
		try {
			projectId = vulnerabilityContentItem.getProjectVersion().getProjectId().toString();
		} catch (final MissingUUIDException e) {
			logger.error(
					"Error getting Project ID. Unable to determine whether this component still has vulnerabilites");
			return true;
		}
		String projectVersionId;
		try {
			projectVersionId = vulnerabilityContentItem.getProjectVersion().getVersionId().toString();
		} catch (final MissingUUIDException e) {
			logger.error(
					"Error getting Project Version ID. Unable to determine if this component still has vulnerabilities");
			return true;
		}
		final String componentName = vulnerabilityContentItem.getComponentName();

		final VulnerableBomComponentRestService vulnerableBomComponentRestService = dataServicesFactory
				.getVulnerableBomComponentRestService();
		List<VulnerableBomComponentItem> vulnerableBomComponentItems;
		try {
			vulnerableBomComponentItems = vulnerableBomComponentRestService
					.getVulnerableComponentsMatchingComponentName(projectId, projectVersionId, componentName);
		} catch (IOException | URISyntaxException | BDRestException e) {
			logger.error(
					"Error looking up component via Hub vulnerable components API. Unable to determine if this component still has vulnerabilities");
			return true;
		}

		logger.debug("vulnerableBomComponentItems.size(): " + vulnerableBomComponentItems.size());
		if (hasVersion(vulnerableBomComponentItems, vulnerabilityContentItem.getComponentVersion())) {
			logger.debug("This component still has vulnerabilities");
			return true;
		} else {
			logger.debug("This component either no longer has vulnerabilities, or is no longer in the BOM");
			return false;
		}
	}

	private boolean hasVersion(final List<VulnerableBomComponentItem> vulnerableBomComponentItems,
			String targetVersionName) {
		if (StringUtils.isEmpty(targetVersionName)) {
			targetVersionName = null;
		}
		for (final VulnerableBomComponentItem vulnerableBomComponentItem : vulnerableBomComponentItems) {
			String currentVersionName = vulnerableBomComponentItem.getComponentVersionName();
			if (StringUtils.isEmpty(currentVersionName)) {
				currentVersionName = null;
			}
			if (currentVersionName == targetVersionName) {
				return true;
			}
		}
		return false;
	}

	private NotificationEvent handleNotification(final VulnerabilityContentItem vulnerabilityContentItem,
			final boolean componentVersionExistsInBom) throws NotificationServiceException {

		final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
		final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem.getUpdatedVulnList();
		final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem.getDeletedVulnList();

		final boolean notificationHasOnlyDeletes = (addedVulnList == null || addedVulnList.isEmpty())
				&& (updatedVulnList == null || updatedVulnList.isEmpty())
				&& (deletedVulnList != null && !deletedVulnList.isEmpty());

		ProcessingAction eventAction = ProcessingAction.ADD;
		if (!componentVersionExistsInBom) {
			eventAction = ProcessingAction.REMOVE;
		} else if (notificationHasOnlyDeletes) {
			eventAction = ProcessingAction.ADD;
		}
		final String projectName = vulnerabilityContentItem.getProjectVersion().getProjectName();
		final String projectVersion = vulnerabilityContentItem.getProjectVersion().getProjectVersionName();
		final String componentName = vulnerabilityContentItem.getComponentName();
		final String componentVersion = vulnerabilityContentItem.getComponentVersion();
		final Map<String, String> dataMap = new LinkedHashMap<>(2);
		dataMap.put(componentName, NotificationProcessorConstants.ITEM_TYPE_COMPONENT);
		dataMap.put(componentVersion, "");
		return new NotificationEvent(eventAction, projectName, projectVersion, componentName, componentVersion,
				NotificationProcessorConstants.CATEGORY_VULNERABILITY, dataMap);
	}
}
