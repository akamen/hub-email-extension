package com.blackducksoftware.integration.email.transformer;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.blackducksoftware.integration.email.model.FreemarkerTarget;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;

public class VulnerabilityTransformer extends NotificationTransformer {
	@Override
	public FreemarkerTarget transform(final NotificationContentItem notification) {
		final FreemarkerTarget templateData = new FreemarkerTarget();

		if (notification instanceof VulnerabilityContentItem) {
			final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;

			final List<VulnerabilitySourceQualifiedId> added = vulnerabilityContentItem.getAddedVulnList();
			final List<VulnerabilitySourceQualifiedId> updated = vulnerabilityContentItem.getAddedVulnList();
			final List<VulnerabilitySourceQualifiedId> deleted = vulnerabilityContentItem.getAddedVulnList();
			final boolean hasData = !added.isEmpty() || !updated.isEmpty() || !deleted.isEmpty();
			if (hasData) {
				final Map<String, String> vulnerabilityData = transformNotificationContentItem(
						vulnerabilityContentItem);
				addVulnerabilityText(vulnerabilityData, KEY_VULN_ADDED, added, "added");
				addVulnerabilityText(vulnerabilityData, KEY_VULN_UPDATED, updated, "updated");
				addVulnerabilityText(vulnerabilityData, KEY_VULN_DELETED, deleted, "deleted");
				templateData.add(vulnerabilityData);
			}
		}
		return templateData;
	}

	private void addVulnerabilityText(final Map<String, String> map, final String key,
			final List<VulnerabilitySourceQualifiedId> vulnerabilityList, final String verb) {
		if (vulnerabilityList.size() > 0) {
			final List<String> vulnerabilityComments = new ArrayList<>(vulnerabilityList.size());
			for (final VulnerabilitySourceQualifiedId vuln : vulnerabilityList) {
				if (vuln != null && vuln.getVulnerabilityId() != null) {
					vulnerabilityComments.add(vuln.getVulnerabilityId() + " (" + vuln.getSource() + ")");
				}
			}

			String commentText = "Vulnerabilities " + verb + ": ";
			commentText += StringUtils.join(vulnerabilityComments, ", ");
			map.put(key, commentText);
		}
	}
}
